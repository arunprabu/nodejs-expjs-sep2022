CRUD App 
--
  MongoDB using mongoose 
  --
    Create User 
    Read Users / Read User Details 
    update USer 
    Delete USer [TODO]

  Authentication using PAssport JS 
  ---


  MySQL using sequelize 
  -
    Create employee
    Read employees 
    
    Build and Deployment 
    Unit Testing 


  
Monday
--

  M V C 
  --

  MongoDB 
  --

Tuesday
--
  Completing REST API with MongoDB
  Validations 
  CORS 
  Setting up base for Authentication

Wednesday
--
  Completing Authentication

Thursday
--
  MYSQL 
  Deployment 
  Best practices 
  Optimizations 



REST API Endpoints
--
  CRUD App 
  --
    Add User  - POST [DONE]
      http://localhost:3000/api/users

    Listing Users - GET [DONE]
      http://localhost:3000/api/users

    User Details - GET [DONE]
      http://localhost:3000/api/users/1

    Update User - PUT [DONE]
      http://localhost:3000/api/users/1

    Delete User - DELETE [TODO]
      http://localhost:3000/api/users/1

---

  Design Pattern: MVC 

---

Databases
--
  1. DB Server
      host / ip address: localhost or 127.0.0.1 
      port: ..... 
      db credentials (username and password)

  2. DB Client
      Shell Client 
      GUI Client
      DB Driver  (MongoDB Official Driver, MongooseJS )


Types Of DBMS
--
  1. Relational DBMS (RDBMS)
      * Oracle, MySQL, PostgreSQL, MariaDB, MS-SQL Server 
      * Data will be saved in Databases 
        * Data would be saved in Tables of the databases (columns and rows)
      * Interact with db using Structure Query Language (SQL) 
      * Schema based 
      * Perfect for structured data

  2. NoSQL (Not Only SQL)
      * MongoDB, Amazon DynamoDB, Apache Ignite
      * Data will be saved in Databases 
        * Data would be saved in Collections of the databases 
        * stored in fields (key and value)
        * will be in the form of Object - JSON
      * Interact with MongoDB using JavaScript
      * Schema-less 
      * Perfect for unstructured data

      Requirement: Save Partially structured data in MongoDB. 


MongoDB 
--
Windows: 
  C:/Program Files/MongoDB/Server/4.0/bin/> 
  
  Start MongoDB Server: 
    C:/Program Files/MongoDB/Server/4.0/bin/>mongod 

  Launch the Client Tool: 
    C:/Program Files/MongoDB/Server/4.4/bin/>mongo 
    
  Port: 27017 

  
Mac
--
  if you have installed it thru brew, start the server 
    brew services start mongodb-community@5.0

  Launch the Client Tool: 
    mongo 
  


===
MongoDB commands
--
  to know selected db 
    db

  to list all dbs  (only the dbs with collections will appear)
    show dbs 

  to create a db or to select a db 
    use usersDB 
  
  check the selected db 
    db 

  Create a colection 
    db.createCollection('users')

  to see all collctions of the selected db 
    show collections

  to insert (CREATE) -- we create document - equal to rows 
    db.users.insert({ name: 'John', city: 'Sydney' })
    db.users.insert({ phone: 23423423, email: 'a@b.com' } )
    db.users.insert({age: 20})
    db.users.insert({cities: ['chennai', 'bangalore', 'hyderabad']})

  to list all documents (READ)
    db.users.find({}) 

  to fetch one document with _id being primary key (READ)
    db.users.findOne({"_id" : ObjectId("63298467d911d70320defef1")})

  to update one document 
    db.users.updateOne({name: 'John'}, { $set: {age: 40} })

  TODO: learn about deleting the document 
    

  
MongooseJS
---
  * Unofficial Driver 
  * Offering the data modeling 
  * provides the schema for mongodb 
  

Why?
--  

  HTTP 
    * stateless 

  client (example.com/login)      => server 
  client                          <= server 

  client (example.com/reports)    => server 
  client                          <= server 


Authentication
--
  1. Session Based Authentication
       email, password 
       1. if valid 
            session id would be created and SAVED in server 
              server will send session id to the browser 
                browser should store in cookies 
                  (every subsequent req post-login)
                    browser should send the session id in cookies to the server 
                      (before sending further res to the client )
                        server will compare the session id coming from browser with the one saved 
                          if matches 
                            then, res will be sent to the browser 
                          else 
                            login again  

       2. else 
            login again with valid credentials 


      Disadvantages 
      ---
        Session ID should be maintained by the server 
        

  2. Token Based Authentication
      email, password 
       1. if valid 
          JSON Web Token (JWT) would be generated using some encryption
            server will send JWT to the browser 
              browser should store in cookies/localStorage/sessionStorage
                (every subsequent req post-login)
                  browser should send the JWT in req header to the server 
                    (before sending further res to the client )
                      server will validate the JWT coming from browser using decryption
                        if valid
                          then, res will be sent to the browser 
                        else 
                          login again  

        2. else 
            login again with valid credentials 



---
Auth URL's  
--
  localhost:3000/api/auth/signup - POST 
  localhost:3000/api/auth/login  - POST 


